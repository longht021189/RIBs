package ${package_name}

class ${rib_name}Builder {

    @javax.inject.Inject lateinit var router: ${rib_name}Router

    fun build(injector: dagger.android.DispatchingAndroidInjector<Any>): ${rib_name}Router {
        injector.inject(this)
        return router
    }

    @dagger.Module
    interface ParentModule {

        @${rib_name}Scope
        @dagger.android.ContributesAndroidInjector(modules = [Module::class])
        fun contribute${rib_name}BuilderInjector(): ${rib_name}Builder
    }

    @dagger.Module
    internal abstract class Module {

        @${rib_name}Scope
        @dagger.Binds
        internal abstract fun presenter(view: ${rib_name}View): ${rib_name}Interactor.${rib_name}Presenter

        @dagger.Module
        companion object {

            @${rib_name}Scope
            @dagger.Provides
            @JvmStatic
            internal fun inflate${rib_name}View(): ${rib_name}View {
                TODO("Inflate a new view using the provided inflater, or create a new view programatically using the provided context from the parentViewGroup.")
            }
        }

        // TODO: Create provider methods for dependencies created by this Rib. These should be static.
    }

    @javax.inject.Scope
    @kotlin.annotation.Retention(AnnotationRetention.RUNTIME)
    internal annotation class ${rib_name}Scope
}
