package ${package_name}

import javax.inject.Inject
import dagger.android.DispatchingAndroidInjector
import dagger.multibindings.StringKey
import dagger.Provides
import dagger.multibindings.IntoMap

class ${rib_name}Builder private constructor(injector: DispatchingAndroidInjector<Any>) {

    @Inject internal lateinit var router: ${rib_name}Router

    init {
        injector.inject(this)
    }

    @dagger.Module
    abstract class ParentModule {

        @${rib_name}Scope
        @dagger.android.ContributesAndroidInjector(modules = [Module::class])
        abstract fun contribute${rib_name}BuilderInjector(): ${rib_name}Builder

        @dagger.Module
        companion object {

            @JvmStatic @Provides
            @StringKey("${rib_name_to_upper}") @IntoMap
            fun provide${rib_name}Builder(injector: DispatchingAndroidInjector<Any>): Router<*> {
                return ${rib_name}Builder(injector).router
            }
        }
    }

    @dagger.Module
    internal abstract class Module {
        // TODO: Create provider methods for dependencies created by this Rib. These methods should be static.
    }

    @javax.inject.Scope
    @kotlin.annotation.Retention(AnnotationRetention.RUNTIME)
    internal annotation class ${rib_name}Scope

    @${rib_name}Scope
    class ${rib_name}Presenter @javax.inject.Inject constructor(): com.uber.rib.core.EmptyPresenter()
}
