package ${package_name}

import javax.inject.Inject
import dagger.android.DispatchingAndroidInjector
import com.uber.rib.core.IBuilder

class ${rib_name}Builder : IBuilder {

    @Inject lateinit var router: ${rib_name}Router

    override fun build(injector: DispatchingAndroidInjector<Any>): ${rib_name}Router {
        injector.inject(this)
        return router
    }

    @dagger.Module
    interface ParentModule {

        @${rib_name}Scope
        @dagger.android.ContributesAndroidInjector(modules = [Module::class])
        fun contribute${rib_name}BuilderInjector(): ${rib_name}Builder
    }

    @dagger.Module
    internal abstract class Module {
        // TODO: Create provider methods for dependencies created by this Rib. These methods should be static.
    }

    @javax.inject.Scope
    @kotlin.annotation.Retention(AnnotationRetention.RUNTIME)
    internal annotation class ${rib_name}Scope

    @${rib_name}Scope
    class ${rib_name}Presenter @javax.inject.Inject constructor(): com.uber.rib.core.EmptyPresenter()
}
