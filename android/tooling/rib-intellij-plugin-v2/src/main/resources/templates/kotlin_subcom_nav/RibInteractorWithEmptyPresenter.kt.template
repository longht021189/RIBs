package ${package_name}

import javax.inject.Inject
import dagger.Lazy
import com.uber.rib.core.navigation.Navigation
import com.uber.rib.core.Interactor
import com.uber.rib.core.navigation.Node
import com.uber.rib.core.Bundle

@${rib_name}Builder.${rib_name}Scope
class ${rib_name}Interactor @Inject constructor(
    presenter: Lazy<${rib_name}Builder.${rib_name}Presenter>,
    router: Lazy<${rib_name}Router>,
    private val navigation: Lazy<Navigation>
) : Interactor<${rib_name}Builder.${rib_name}Presenter, ${rib_name}Router>(presenter, router) {

    private val backStackName: String = TODO("backStackName, String HERE")
    private val nodeManager by lazy {
        navigation.get().getNodeManager(backStackName)
    }

    override fun didBecomeActive(savedInstanceState: Bundle?) {
        super.didBecomeActive(savedInstanceState)
        nodeManager.addNode(NAME, this)

        // TODO: Add attachment logic here (RxSubscriptions, etc.).
    }

    override fun willResignActive() {
        // TODO: Perform any required clean up here, or delete this method entirely if not needed.

        nodeManager.removeNode(NAME)
        super.willResignActive()
    }

    companion object {
        const val NAME = "${rib_name_to_upper}"
    }
}
